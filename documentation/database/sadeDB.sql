-- MySQL Script generated by MySQL Workbench
-- Fri Sep  3 16:17:38 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema sadeDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema sadeDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sadeDB` DEFAULT CHARACTER SET utf8 ;
USE `sadeDB` ;

-- -----------------------------------------------------
-- Table `sadeDB`.`Usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Usuarios` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT,
  `nombres` VARCHAR(60) NOT NULL,
  `apellido1` VARCHAR(45) NOT NULL,
  `apellido2` VARCHAR(45) NULL,
  `tipo` INT NOT NULL COMMENT '1 = Estudiante\n2 = Docente\n3 = Directivo',
  `email` VARCHAR(45) NOT NULL,
  `sexo` ENUM('M', 'F') NOT NULL,
  `fechaNacimiento` DATE NOT NULL,
  `intentosConexion` INT NOT NULL,
  `fechaRegistro` DATETIME NOT NULL DEFAULT NOW(),
  `contrasenia` VARCHAR(500) NULL,
  `remember_token` VARCHAR(100) NULL,
  `fotoPerfil` VARCHAR(100) NULL,
  `delete` DATETIME NULL,
  PRIMARY KEY (`idUsuario`),
  UNIQUE INDEX `email_Usuarios_UNIQUE` (`email` ASC) VISIBLE,
  INDEX `fotoPerfil` (`fotoPerfil` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Docentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Docentes` (
  `idUsuario` INT NOT NULL,
  `direccion` VARCHAR(45) NULL,
  `perfilAcademico` TINYTEXT NULL,
  PRIMARY KEY (`idUsuario`),
  CONSTRAINT `fk_Docentes_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Grupos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Grupos` (
  `idGrupo` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(10) NOT NULL,
  `jornada` ENUM('Ma√±ana', 'Tarde', 'Nocturno', 'Mixto') NOT NULL,
  `salon` INT NULL,
  `grado` TINYINT(2) NOT NULL,
  `director` INT NULL,
  PRIMARY KEY (`idGrupo`),
  INDEX `fk_Grupos_Docentes1_idx` (`director` ASC) VISIBLE,
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC) VISIBLE,
  CONSTRAINT `fk_Grupos_Docentes1`
    FOREIGN KEY (`director`)
    REFERENCES `sadeDB`.`Docentes` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Estudiantes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Estudiantes` (
  `idUsuario` INT NOT NULL,
  `direccion` VARCHAR(45) NOT NULL,
  `RH` ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', '0+', '0-') NOT NULL,
  `egresado` TINYINT NOT NULL DEFAULT 0,
  `idGrupo` INT NULL,
  PRIMARY KEY (`idUsuario`),
  INDEX `fk_Estudiantes_Grupos1_idx` (`idGrupo` ASC) VISIBLE,
  CONSTRAINT `fk_Estudiantes_Usuarios`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Estudiantes_Grupos1`
    FOREIGN KEY (`idGrupo`)
    REFERENCES `sadeDB`.`Grupos` (`idGrupo`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Directivos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Directivos` (
  `idUsuario` INT NOT NULL,
  `cargo` VARCHAR(50) NOT NULL,
  `direccion` VARCHAR(45) NULL,
  `emailPublico` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUsuario`),
  CONSTRAINT `fk_Administrativos_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`DocumentoIdentidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`DocumentoIdentidad` (
  `idUsuario` INT NOT NULL,
  `tipoDocumento` ENUM('CC', 'CE', 'RC', 'TI') NOT NULL,
  `numero` VARCHAR(11) NOT NULL,
  `fechaExpedicion` DATE NOT NULL,
  `lugarExpedicion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUsuario`),
  CONSTRAINT `fk_DocumentoIdentidad_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Telefono`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Telefono` (
  `idTelefono` INT NOT NULL AUTO_INCREMENT,
  `idUsuario` INT NOT NULL,
  `telefono` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`idTelefono`),
  INDEX `fk_Telefono_Usuarios1_idx` (`idUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_Telefono_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Areas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Areas` (
  `idArea` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `descripcion` TEXT NULL,
  PRIMARY KEY (`idArea`),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`GruposDocentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`GruposDocentes` (
  `idGrupo` INT NOT NULL,
  `idDocente` INT NOT NULL,
  `idArea` INT NOT NULL,
  PRIMARY KEY (`idGrupo`, `idDocente`, `idArea`),
  INDEX `fk_Grupos_has_Docentes_Docentes1_idx` (`idDocente` ASC) VISIBLE,
  INDEX `fk_Grupos_has_Docentes_Grupos1_idx` (`idGrupo` ASC) VISIBLE,
  INDEX `fk_GruposDocentes_Areas1_idx` (`idArea` ASC) VISIBLE,
  CONSTRAINT `fk_Grupos_has_Docentes_Grupos1`
    FOREIGN KEY (`idGrupo`)
    REFERENCES `sadeDB`.`Grupos` (`idGrupo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Grupos_has_Docentes_Docentes1`
    FOREIGN KEY (`idDocente`)
    REFERENCES `sadeDB`.`Docentes` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_GruposDocentes_Areas1`
    FOREIGN KEY (`idArea`)
    REFERENCES `sadeDB`.`Areas` (`idArea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Privacidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Privacidad` (
  `idPrivacidad` INT NOT NULL AUTO_INCREMENT,
  `publico` TINYINT NOT NULL DEFAULT 0,
  `directivos` TINYINT NOT NULL DEFAULT 1,
  `docentes` TINYINT NOT NULL DEFAULT 1,
  `estudiantes` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idPrivacidad`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Publicaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Publicaciones` (
  `idPublicacion` INT NOT NULL AUTO_INCREMENT,
  `titulo` VARCHAR(150) NOT NULL,
  `contenido` TEXT(1000) NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT now(),
  `idUsuario` INT NOT NULL,
  `idPrivacidad` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idPublicacion`),
  INDEX `fk_Publicaciones_Usuarios1_idx` (`idUsuario` ASC) VISIBLE,
  INDEX `fk_Publicaciones_Privacidad1_idx` (`idPrivacidad` ASC) VISIBLE,
  CONSTRAINT `fk_Publicaciones_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Publicaciones_Privacidad1`
    FOREIGN KEY (`idPrivacidad`)
    REFERENCES `sadeDB`.`Privacidad` (`idPrivacidad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Dislike`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Dislike` (
  `idPublicacion` INT NOT NULL,
  `idUsuario` INT NOT NULL,
  PRIMARY KEY (`idPublicacion`, `idUsuario`),
  INDEX `fk_Publicaciones_has_Usuarios_Usuarios1_idx` (`idUsuario` ASC) VISIBLE,
  INDEX `fk_Publicaciones_has_Usuarios_Publicaciones1_idx` (`idPublicacion` ASC) VISIBLE,
  CONSTRAINT `fk_Publicaciones_has_Usuarios_Publicaciones1`
    FOREIGN KEY (`idPublicacion`)
    REFERENCES `sadeDB`.`Publicaciones` (`idPublicacion`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Publicaciones_has_Usuarios_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Likes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Likes` (
  `idPublicacion` INT NOT NULL,
  `idUsuario` INT NOT NULL,
  PRIMARY KEY (`idPublicacion`, `idUsuario`),
  INDEX `fk_Publicaciones_has_Usuarios1_Usuarios1_idx` (`idUsuario` ASC) VISIBLE,
  INDEX `fk_Publicaciones_has_Usuarios1_Publicaciones1_idx` (`idPublicacion` ASC) VISIBLE,
  CONSTRAINT `fk_Publicaciones_has_Usuarios1_Publicaciones1`
    FOREIGN KEY (`idPublicacion`)
    REFERENCES `sadeDB`.`Publicaciones` (`idPublicacion`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Publicaciones_has_Usuarios1_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Eventos` (
  `idEventos` INT NOT NULL AUTO_INCREMENT,
  `hora` DATETIME NOT NULL DEFAULT now(),
  `descripcion` VARCHAR(100) NOT NULL,
  `idUsuario` INT NOT NULL,
  `idPrivacidad` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idEventos`),
  INDEX `fk_Eventos_Usuarios1_idx` (`idUsuario` ASC) VISIBLE,
  INDEX `fk_Eventos_Privacidad1_idx` (`idPrivacidad` ASC) VISIBLE,
  CONSTRAINT `fk_Eventos_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Eventos_Privacidad1`
    FOREIGN KEY (`idPrivacidad`)
    REFERENCES `sadeDB`.`Privacidad` (`idPrivacidad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`Notificaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`Notificaciones` (
  `idNotificacion` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(500) NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  `directivo` TINYINT NOT NULL DEFAULT 0,
  `docente` TINYINT NOT NULL DEFAULT 0,
  `estudiante` TINYINT NOT NULL DEFAULT 0,
  `idUsuario` INT NULL,
  PRIMARY KEY (`idNotificacion`),
  INDEX `fk_Notificaciones_Usuarios1_idx` (`idUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_Notificaciones_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`VistasNotificaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`VistasNotificaciones` (
  `idUsuario` INT NOT NULL,
  `idNotificacion` INT NOT NULL,
  PRIMARY KEY (`idUsuario`, `idNotificacion`),
  INDEX `fk_Usuarios_has_Notificaciones_Notificaciones1_idx` (`idNotificacion` ASC) VISIBLE,
  INDEX `fk_Usuarios_has_Notificaciones_Usuarios1_idx` (`idUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_Usuarios_has_Notificaciones_Usuarios1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Usuarios` (`idUsuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Usuarios_has_Notificaciones_Notificaciones1`
    FOREIGN KEY (`idNotificacion`)
    REFERENCES `sadeDB`.`Notificaciones` (`idNotificacion`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`AreasDocente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`AreasDocente` (
  `idUsuario` INT NOT NULL,
  `idArea` INT NOT NULL,
  PRIMARY KEY (`idUsuario`, `idArea`),
  INDEX `fk_Docentes_has_Areas_Areas1_idx` (`idArea` ASC) VISIBLE,
  INDEX `fk_Docentes_has_Areas_Docentes1_idx` (`idUsuario` ASC) VISIBLE,
  CONSTRAINT `fk_Docentes_has_Areas_Docentes1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sadeDB`.`Docentes` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Docentes_has_Areas_Areas1`
    FOREIGN KEY (`idArea`)
    REFERENCES `sadeDB`.`Areas` (`idArea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sadeDB`.`personal_access_tokens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`personal_access_tokens` (
  `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `tokenable_type` VARCHAR(255) NOT NULL,
  `tokenable_id` BIGINT UNSIGNED NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `token` VARCHAR(64) NOT NULL,
  `abilities` TEXT NULL DEFAULT NULL,
  `last_used_at` TIMESTAMP NULL DEFAULT NULL,
  `created_at` TIMESTAMP NULL DEFAULT NULL,
  `updated_at` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `personal_access_tokens_token_unique` (`token` ASC) VISIBLE,
  INDEX `personal_access_tokens_tokenable_type_tokenable_id_index` (`tokenable_type` ASC, `tokenable_id` ASC) VISIBLE)
ENGINE = InnoDB;

USE `sadeDB` ;

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_infousuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_infousuario` (`idUsuario` INT, `nombreCompleto` INT, `fotoPerfil` INT, `tipo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_publicaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_publicaciones` (`idPublicacion` INT, `titulo` INT, `contenido` INT, `fecha` INT, `nlikes` INT, `ndislikes` INT, `publico` INT, `directivos` INT, `docentes` INT, `estudiantes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_eventos` (`idEventos` INT, `hora` INT, `descripcion` INT, `idUsuario` INT, `nombreCompleto` INT, `tipo` INT, `publico` INT, `directivos` INT, `docentes` INT, `estudiantes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_datosUsuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_datosUsuarios` (`idUsuario` INT, `nombres` INT, `apellido1` INT, `apellido2` INT, `email` INT, `tipo` INT, `fotoPerfil` INT, `sexo` INT, `fechaNacimiento` INT, `fechaRegistro` INT, `tipoDocumento` INT, `numero` INT, `fechaExpedicion` INT, `lugarExpedicion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_datosEstudiantes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_datosEstudiantes` (`direccion` INT, `RH` INT, `egresado` INT, `idGrupo` INT, `nombreGrupo` INT, `grado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_datosdocentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_datosdocentes` (`direccion` INT, `perfilAcademico` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_datosdirectivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_datosdirectivo` (`direccion` INT, `cargo` INT, `emailPublico` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_infodirectivos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_infodirectivos` (`idUsuario` INT, `nombre` INT, `email` INT, `fotoPerfil` INT, `emailPublico` INT, `documentoIdentidad` INT, `cargo` INT, `telefono` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_infodocentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_infodocentes` (`idUsuario` INT, `nombre` INT, `email` INT, `fotoPerfil` INT, `documentoIdentidad` INT, `perfilAcademico` INT, `telefono` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_infoestudiantes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_infoestudiantes` (`idUsuario` INT, `nombre` INT, `email` INT, `fotoPerfil` INT, `documentoIdentidad` INT, `egresado` INT, `idGrupo` INT, `nombreGrupo` INT, `telefono` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_pub_publicaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_pub_publicaciones` (`idPublicacion` INT, `titulo` INT, `contenido` INT, `fecha` INT, `nombreCompleto` INT, `tipo` INT, `fotoPerfil` INT, `nlikes` INT, `ndislikes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_pub_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_pub_eventos` (`idEventos` INT, `hora` INT, `descripcion` INT, `nombreCompleto` INT, `tipo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_pub_directivos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_pub_directivos` (`nombre` INT, `emailPublico` INT, `fotoPerfil` INT, `cargo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_est_publicaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_est_publicaciones` (`idPublicacion` INT, `titulo` INT, `contenido` INT, `fecha` INT, `idUsuario` INT, `nombreCompleto` INT, `tipo` INT, `fotoPerfil` INT, `nlikes` INT, `ndislikes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_publicaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_publicaciones` (`idPublicacion` INT, `titulo` INT, `contenido` INT, `fecha` INT, `idUsuario` INT, `nombreCompleto` INT, `tipo` INT, `fotoPerfil` INT, `nlikes` INT, `ndislikes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_dir_publicaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_dir_publicaciones` (`idPublicacion` INT, `titulo` INT, `contenido` INT, `fecha` INT, `idUsuario` INT, `nombreCompleto` INT, `tipo` INT, `fotoPerfil` INT, `nlikes` INT, `ndislikes` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_est_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_est_eventos` (`idEventos` INT, `hora` INT, `descripcion` INT, `idUsuario` INT, `nombreCompleto` INT, `tipo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_est_infodocentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_est_infodocentes` (`idUsuario` INT, `nombre` INT, `fotoPerfil` INT, `email` INT, `perfilAcademico` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_est_infoestudiantes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_est_infoestudiantes` (`idUsuario` INT, `nombre` INT, `fotoPerfil` INT, `email` INT, `egresado` INT, `idGrupo` INT, `nombreGrupo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_est_infodirectivos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_est_infodirectivos` (`idUsuario` INT, `nombre` INT, `fotoPerfil` INT, `emailPublico` INT, `cargo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_est_gradosdocentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_est_gradosdocentes` (`idGrupo` INT, `nombreGrupo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_telefonostipousuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_telefonostipousuario` (`idTelefono` INT, `idUsuario` INT, `telefono` INT, `tipo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_infodocentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_infodocentes` (`idUsuario` INT, `nombre` INT, `email` INT, `perfilAcademico` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_infodirectivo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_infodirectivo` (`idUsuario` INT, `nombre` INT, `email` INT, `emailPublico` INT, `cargo` INT, `telefono` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_infoestudiantes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_infoestudiantes` (`idUsuario` INT, `nombre` INT, `email` INT, `egresado` INT, `idGrupo` INT, `nombreGrupo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_eventos` (`idEventos` INT, `hora` INT, `descripcion` INT, `idUsuario` INT, `nombreCompleto` INT, `tipo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_gradosdocentes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_gradosdocentes` (`idGrupo` INT, `nombreGrupo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_estudiantesClase`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_estudiantesClase` (`idUsuario` INT, `nombres` INT, `apellido1` INT, `apellido2` INT, `fotoPerfil` INT, `email` INT, `RH` INT, `idGrupo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_prf_estudiantesDirector`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_prf_estudiantesDirector` (`idUsuario` INT, `nombres` INT, `apellido1` INT, `apellido2` INT, `email` INT, `RH` INT, `tipoDocumento` INT, `numeroDocumento` INT, `direccion` INT, `fechaNacimiento` INT, `sexo` INT, `idGrupo` INT, `telefono` INT);

-- -----------------------------------------------------
-- Placeholder table for view `sadeDB`.`vs_dir_eventos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sadeDB`.`vs_dir_eventos` (`idEventos` INT, `hora` INT, `descripcion` INT, `idUsuario` INT, `nombreCompleto` INT, `tipo` INT);

-- -----------------------------------------------------
-- procedure p_eventosMes
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_eventosMes` (IN mes INT, IN anho INT)
BEGIN
	SELECT
		DAY(hora) AS Dia,
		COUNT(*) AS Eventos
	FROM Eventos
	WHERE MONTH(hora) = mes AND YEAR(hora) = anho
	GROUP BY DAY(hora);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_notificacionesUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_notificacionesUsuario` (IN arg_idUsuario INT)
BEGIN
	SELECT
		n.idNotificacion,
        n.descripcion,
        n.fecha
	FROM Notificaciones n
	WHERE 
	(CASE tipoUsuarioSegunId(arg_idUsuario)
		WHEN 1 THEN n.estudiante = 1
        WHEN 2 THEN n.docente  = 1
        WHEN 3 THEN n.directivo = 1
        ELSE FALSE
    END
    OR n.idUsuario = arg_idUsuario)
    AND 
    NOT EXISTS(SELECT vi.*
	FROM VistasNotificaciones vi 
    WHERE vi.idNotificacion = n.idNotificacion AND vi.idUsuario = arg_idUsuario
    ) ORDER BY n.fecha DESC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_numNotificaciones
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_numNotificaciones` (IN arg_idUsuario INT)
BEGIN
	SELECT
		COUNT(*) AS notificaciones
	FROM Notificaciones n
	WHERE 
	(CASE tipoUsuarioSegunId(arg_idUsuario)
		WHEN 1 THEN n.estudiante = 1
        WHEN 2 THEN n.docente  = 1
        WHEN 3 THEN n.directivo = 1
        ELSE FALSE
    END
    OR n.idUsuario = arg_idUsuario)
    AND 
    NOT EXISTS(SELECT vi.*
	FROM VistasNotificaciones vi 
    WHERE vi.idNotificacion = n.idNotificacion AND vi.idUsuario = arg_idUsuario
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_pub_numUsuarios
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_pub_numUsuarios`()
BEGIN
	SELECT 
	(SELECT COUNT(*) FROM Estudiantes e INNER JOIN Usuarios u ON u.idUsuario=e.idUsuario WHERE u.delete IS NULL AND e.egresado = 0) AS estudiantes,
    (SELECT COUNT(*) FROM Estudiantes e INNER JOIN Usuarios u ON u.idUsuario=e.idUsuario WHERE u.delete IS NULL AND e.egresado = 1) AS egresados,
    (SELECT COUNT(*) FROM Docentes d INNER JOIN Usuarios u ON u.idUsuario=d.idUsuario WHERE u.delete IS NULL) AS docentes,
    (SELECT COUNT(*) FROM Directivos d INNER JOIN Usuarios u ON u.idUsuario=d.idUsuario WHERE u.delete IS NULL) AS directivos;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_pub_eventosMes
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_pub_eventosMes`(IN mes INT, IN anho INT)
BEGIN
	SELECT
		DAY(e.hora) AS Dia,
		COUNT(*) AS Eventos
	FROM Eventos e
    INNER JOIN Privacidad p ON p.idPrivacidad = e.idPrivacidad
	WHERE MONTH(e.hora) = mes AND YEAR(e.hora) = anho AND p.publico = 1
	GROUP BY DAY(e.hora);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_pub_login
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_pub_login`(IN `usuario` VARCHAR(45))
BEGIN
	DECLARE var_idUsuario INT;
    DECLARE intentos INT;
	SET var_idUsuario = 0;-- Si existe el usuario
    SET intentos = 0; -- Intentos Conexion
    # Si el usuario no es numerico
    IF (usuario  REGEXP '^[0-9]+$') = 0 THEN
		# Verificar si es un email
		IF (usuario REGEXP '[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}') = 1 THEN
			SELECT idUsuario, intentosConexion INTO var_idUsuario, intentos FROM Usuarios u
			WHERE u.delete IS NULL
			AND email=usuario;
        END IF;
    ELSE
		SELECT u.idUsuario, intentosConexion INTO var_idUsuario, intentos FROM Usuarios u
        INNER JOIN DocumentoIdentidad d ON u.idUsuario=d.idUsuario
        WHERE u.delete IS NULL
        AND numERO=usuario;
    END IF;
    # SI EXISTE EL USUARIO
    IF var_idUsuario > 0 THEN
		IF intentos < 8 THEN
			UPDATE Usuarios SET intentosConexion=intentosConexion+1 WHERE idUsuario=var_idUsuario LIMIT 1;
        END IF;
        SELECT idUsuario,intentosConexion FROM Usuarios WHERE idUsuario=var_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_eventosMes
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_eventosMes`(IN arg_idUsuario INT,IN mes INT, IN anho INT)
BEGIN
	SELECT
		DAY(e.hora) AS Dia,
		COUNT(*) AS Eventos
	FROM Eventos e
    INNER JOIN Privacidad p ON p.idPrivacidad = e.idPrivacidad
	WHERE MONTH(e.hora) = mes AND YEAR(e.hora) = anho AND (p.estudiantes = 1 OR e.idUsuario=arg_idUsuario)
	GROUP BY DAY(e.hora);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_updateDatos
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_updateDatos`(
	IN arg_idUsuario INT, 
    IN arg_direccion VARCHAR(45),
    IN arg_email VARCHAR(45),
    IN arg_contrasenia VARCHAR(500)
)
BEGIN
	IF arg_contrasenia IS NOT NULL OR arg_email IS NOT NULL THEN
		UPDATE Usuarios SET 
			contrasenia = IF(arg_contrasenia IS NULL, contrasenia, arg_contrasenia),
            email = IF(arg_email IS NULL, email, arg_email)
		WHERE idUsuario = arg_idUsuario;
    END IF;
    IF arg_direccion IS NOT NULL THEN
		UPDATE Estudiantes SET 
			direccion = arg_direccion
		WHERE idUsuario = arg_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_verDatosEstudiante
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_verDatosEstudiante` (IN arg_idUsuario INT)
BEGIN
	SELECT * FROM vs_datosestudiantes WHERE idUsuario = arg_idUsuario LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_verTelefonos
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_verTelefonos` (IN arg_idUsuario INT)
BEGIN
	SELECT 
		idTelefono,
        telefono
    FROM vs_telefonostipousuario 
    WHERE idUsuario=arg_idUsuario AND tipo=1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_deleteTelefono
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_deleteTelefono` (IN arg_idTelefono INT, IN arg_idUsuario INT)
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 1 THEN
		DELETE FROM Telefono WHERE idTelefono=arg_idTelefono AND idUsuario = arg_idUsuario;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_addTelefono
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_addTelefono` (IN arg_idUsuario INT, IN arg_telefono VARCHAR(15))
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 1 THEN
		INSERT Telefono (idUsuario,telefono) VALUES (arg_idUsuario,arg_telefono);
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_editTelefono
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_editTelefono` (IN arg_idTelefono INT, IN arg_idUsuario INT, IN arg_telefono VARCHAR(15))
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 1 THEN
		UPDATE Telefono SET 
			telefono=arg_telefono 
		WHERE idTelefono=arg_idTelefono AND idUsuario = arg_idUsuario;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_vistoNotificacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_vistoNotificacion` (IN arg_idNotificacion INT, IN arg_idUsuario INT)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 1 THEN
		INSERT INTO VistasNotificaciones (idUsuario, idNotificacion)
		SELECT * FROM (SELECT arg_idUsuario, arg_idNotificacion) AS tmp
		WHERE NOT EXISTS (
			SELECT * FROM VistasNotificaciones WHERE idUsuario=arg_idUsuario AND idNotificacion=arg_idNotificacion
		) LIMIT 1;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_addPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_addPublicacion` 
(
	IN arg_titulo VARCHAR(150),
    IN arg_contenido TEXT(1000),
    IN arg_privacidad INT,
    IN arg_idUsuario INT,
    IN arg_fecha DATETIME
)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 1 AND arg_privacidad != 1 THEN
		INSERT INTO Publicaciones
        (titulo,contenido,fecha,idUsuario,idPrivacidad) VALUES
        (arg_titulo,arg_contenido,arg_fecha,arg_idUsuario,arg_privacidad);
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_deletePublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_deletePublicacion` (IN arg_idPublicacion INT, IN arg_idUsuario INT)
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 1 THEN
		DELETE FROM Publicaciones WHERE idPublicacion = arg_idPublicacion AND idUsuario = arg_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_editPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_editPublicacion` 
(
	IN arg_idPublicacion INT,
    IN arg_idUsuario INT,
    IN arg_titulo VARCHAR(150), 
    IN arg_contenido TEXT(1000)
)
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario)  = 1 THEN
		UPDATE Publicaciones 
        SET 
			titulo = IF(arg_titulo IS NULL,titulo,arg_titulo),
			contenido = IF(arg_contenido IS NULL,contenido,arg_contenido)
		WHERE idPublicacion = arg_idPublicacion AND idUsuario = arg_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_addPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_addPublicacion` 
(
	IN arg_titulo VARCHAR(150),
    IN arg_contenido TEXT(1000),
    IN arg_privacidad INT,
    IN arg_idUsuario INT,
    IN arg_fecha DATETIME
)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		INSERT INTO Publicaciones
        (titulo,contenido,fecha,idUsuario,idPrivacidad) VALUES
        (arg_titulo,arg_contenido,arg_fecha,arg_idUsuario,arg_privacidad);
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_addTelefono
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_addTelefono` (IN arg_idUsuario INT, IN arg_telefono VARCHAR(15))
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		INSERT Telefono (idUsuario,telefono) VALUES (arg_idUsuario,arg_telefono);
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_deletePublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_deletePublicacion` (IN arg_idPublicacion INT, IN arg_idUsuario INT)
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		DELETE FROM Publicaciones WHERE idPublicacion = arg_idPublicacion AND idUsuario = arg_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_deleteTelefono
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_deleteTelefono` (IN arg_idTelefono INT, IN arg_idUsuario INT)
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		DELETE FROM Telefono WHERE idTelefono=arg_idTelefono AND idUsuario = arg_idUsuario;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_editPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_editPublicacion` 
(
	IN arg_idPublicacion INT,
    IN arg_idUsuario INT,
    IN arg_titulo VARCHAR(150), 
    IN arg_contenido TEXT(1000)
)
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario)  = 2 THEN
		UPDATE Publicaciones 
        SET 
			titulo = IF(arg_titulo IS NULL,titulo,arg_titulo),
			contenido = IF(arg_contenido IS NULL,contenido,arg_contenido)
		WHERE idPublicacion = arg_idPublicacion AND idUsuario = arg_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_editTelefono
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_editTelefono` (IN arg_idTelefono INT, IN arg_idUsuario INT, IN arg_telefono VARCHAR(15))
BEGIN
    IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		UPDATE Telefono SET 
			telefono=arg_telefono 
		WHERE idTelefono=arg_idTelefono AND idUsuario = arg_idUsuario;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_eventosMes
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_eventosMes`(IN arg_idUsuario INT,IN mes INT, IN anho INT)
BEGIN
	SELECT
		DAY(e.hora) AS Dia,
		COUNT(*) AS Eventos
	FROM Eventos e
    INNER JOIN Privacidad p ON p.idPrivacidad = e.idPrivacidad
	WHERE MONTH(e.hora) = mes AND YEAR(e.hora) = anho AND (p.docentes = 1 OR e.idUsuario = arg_idUsuario)
	GROUP BY DAY(e.hora);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_updateDatos
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_updateDatos`(
	IN arg_idUsuario INT, 
    IN arg_direccion VARCHAR(45),
    IN arg_perfilAcademico VARCHAR(45),
    IN arg_email VARCHAR(45),
    IN arg_contrasenia VARCHAR(500)
)
BEGIN
	IF arg_contrasenia IS NOT NULL OR arg_email IS NOT NULL THEN
		UPDATE Usuarios SET 
			contrasenia = IF(arg_contrasenia IS NULL, contrasenia, arg_contrasenia),
            email = IF(arg_email IS NULL, email, arg_email)
		WHERE idUsuario = arg_idUsuario;
    END IF;
    IF arg_direccion IS NOT NULL OR arg_perfilAcademico IS NOT NULL THEN
		UPDATE Docentes SET 
			direccion = IF(arg_direccion IS NULL, direccion, arg_direccion),
            perfilAcademico = IF(arg_perfilAcademico IS NULL, perfilAcademico, arg_perfilAcademico)
		WHERE idUsuario = arg_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_verTelefonos
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_verTelefonos` (IN arg_idUsuario INT)
BEGIN
	SELECT 
		idTelefono,
        telefono
    FROM vs_telefonostipousuario 
    WHERE idUsuario=arg_idUsuario AND tipo=2;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_vistoNotificacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_vistoNotificacion` (IN arg_idNotificacion INT, IN arg_idUsuario INT)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		INSERT INTO VistasNotificaciones (idUsuario, idNotificacion)
		SELECT * FROM (SELECT arg_idUsuario, arg_idNotificacion) AS tmp
		WHERE NOT EXISTS (
			SELECT * FROM VistasNotificaciones WHERE idUsuario=arg_idUsuario AND idNotificacion=arg_idNotificacion
		) LIMIT 1;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_misGruposClases
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_misGruposClases` (IN arg_idUsuario INT)
BEGIN
	SELECT
		g.*
	FROM GruposDocentes gd
    INNER JOIN Grupos g ON g.idGrupo = gd.idGrupo
    WHERE gd.idDocente = arg_idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_misGruposDireccion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_misGruposDireccion` (IN arg_idUsuario INT)
BEGIN
	SELECT * FROM Grupos WHERE director = arg_idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_eventosMes
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_eventosMes`(IN arg_idUsuario INT,IN mes INT, IN anho INT)
BEGIN
	SELECT
		DAY(e.hora) AS Dia,
		COUNT(*) AS Eventos
	FROM Eventos e
    INNER JOIN Privacidad p ON p.idPrivacidad = e.idPrivacidad
	WHERE MONTH(e.hora) = mes AND YEAR(e.hora) = anho AND (p.directivos = 1 OR e.idUsuario = arg_idUsuario)
	GROUP BY DAY(e.hora);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_buscarEstudiante
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_buscarEstudiante` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		vs_est_infoestudiantes
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR email LIKE CONCAT(busqueda,'%')
	OR nombreGrupo LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_buscarDocente
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_buscarDocente` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		vs_est_infodocentes
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR email LIKE CONCAT(busqueda,'%')
	OR perfilAcademico LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_buscarDirectivo
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_buscarDirectivo` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		vs_est_infodirectivos
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR emailPublico LIKE CONCAT(busqueda,'%')
	OR cargo LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_buscarGrupo
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_buscarGrupo` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		grupos
	WHERE
	nombre LIKE CONCAT(busqueda,'%')
	OR jornada LIKE CONCAT(busqueda,'%')
	OR salon LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_buscarEvento
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_buscarEvento` ()
BEGIN
	SELECT 
		* 
	FROM vs_est_eventos
	WHERE
	descripcion LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_buscarPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_buscarPublicacion` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_est_publicaciones
	WHERE
	titulo LIKE CONCAT('%',busqueda,'%')
	OR contenido LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_pub_buscarDirectivo
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_pub_buscarDirectivo` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_pub_directivos
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR emailPublico LIKE CONCAT(busqueda,'%')
	OR cargo LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_pub_buscarPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_pub_buscarPublicacion` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_pub_publicaciones
	WHERE
	titulo LIKE CONCAT('%',busqueda,'%')
	OR contenido LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_pub_buscarEvento
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_pub_buscarEvento` ()
BEGIN
	SELECT 
		*
	FROM vs_pub_eventos
	WHERE
	descripcion LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_buscarDirectivo
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_buscarDirectivo` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		vs_prf_infodirectivo
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
    OR email LIKE CONCAT(busqueda,'%')
	OR emailPublico LIKE CONCAT(busqueda,'%')
	OR cargo LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_buscarDocente
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_buscarDocente` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		vs_prf_infodocentes
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR email LIKE CONCAT(busqueda,'%')
	OR perfilAcademico LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_buscarEstudiante
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_buscarEstudiante` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		vs_prf_infoestudiantes
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR email LIKE CONCAT(busqueda,'%')
	OR nombreGrupo LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_buscarEvento
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_buscarEvento` ()
BEGIN
	SELECT 
		* 
	FROM vs_prf_eventos
	WHERE
	descripcion LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_buscarGrupo
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_buscarGrupo` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		grupos
	WHERE
	nombre LIKE CONCAT(busqueda,'%')
	OR jornada LIKE CONCAT(busqueda,'%')
	OR salon LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_buscarPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_buscarPublicacion` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_prf_publicaciones
	WHERE
	titulo LIKE CONCAT('%',busqueda,'%')
	OR contenido LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_buscarDirectivo
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_buscarDirectivo` (IN busqueda VARCHAR(100))
BEGIN
	SELECT
		* 
	FROM vs_infodirectivos
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR email LIKE CONCAT(busqueda,'%')
	OR emailPublico LIKE CONCAT(busqueda,'%')
	OR cargo LIKE CONCAT(busqueda,'%')
	OR documentoIdentidad LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_buscarDocente
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_buscarDocente` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_infodocentes
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR email LIKE CONCAT(busqueda,'%')
	OR perfilAcademico LIKE CONCAT('%',busqueda,'%')
	OR documentoIdentidad LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_buscarEstudiante
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_buscarEstudiante` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_infoestudiantes
	WHERE
	nombre LIKE CONCAT('%',busqueda,'%')
	OR email LIKE CONCAT(busqueda,'%')
	OR documentoIdentidad LIKE CONCAT('%',busqueda,'%')
	OR nombreGrupo LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_buscarEvento
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_buscarEvento` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_dir_eventos
	WHERE
	descripcion LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_buscarGrupo
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_buscarGrupo` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		*
	FROM
		grupos
	WHERE
	nombre LIKE CONCAT(busqueda,'%')
	OR jornada LIKE CONCAT(busqueda,'%')
	OR salon LIKE CONCAT(busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_buscarPublicacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_buscarPublicacion` (IN busqueda VARCHAR(100))
BEGIN
	SELECT 
		* 
	FROM vs_dir_publicaciones
	WHERE
	titulo LIKE CONCAT('%',busqueda,'%')
	OR contenido LIKE CONCAT('%',busqueda,'%')
	OR nombreCompleto LIKE CONCAT('%',busqueda,'%');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_changeFotoPerfil
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_changeFotoPerfil` 
(
	IN arg_idUsuario INT,
    IN arg_fotoPerfil VARCHAR(100)
)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		UPDATE Usuarios 
		SET fotoPerfil = arg_fotoPerfil
		WHERE idUsuario = arg_idUsuario;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_est_changeFotoPerfil
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_est_changeFotoPerfil` 
(
	IN arg_idUsuario INT,
    IN arg_fotoPerfil VARCHAR(100)
)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 1 THEN
		UPDATE Usuarios 
		SET fotoPerfil = arg_fotoPerfil
		WHERE idUsuario = arg_idUsuario;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_changeFotoPerfil
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_changeFotoPerfil` 
(
	IN arg_idUsuario INT,
    IN arg_fotoPerfil VARCHAR(100)
)
BEGIN
	UPDATE Usuarios 
	SET fotoPerfil = arg_fotoPerfil
	WHERE idUsuario = arg_idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_addEvento
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_addEvento`(
	IN arg_hora DATETIME,
    IN arg_descripcion VARCHAR(100),
    IN arg_idUsuario INT,
    IN arg_idPrivacidad INT
)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		INSERT INTO eventos 
        (hora,descripcion,idUsuario,idPrivacidad)
        VALUES
        (arg_hora,arg_descripcion,arg_idUsuario,arg_idPrivacidad);
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_deleteEvento
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_deleteEvento`(
	IN arg_idEvento INT,
    IN arg_idUsuario INT
)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 2 THEN
		DELETE FROM Eventos 
        WHERE 
        idEventos = arg_idEvento
        AND idUsuario = arg_idUsuario;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_prf_verDatosDocente
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_prf_verDatosDocente`(IN arg_idUsuario INT)
BEGIN
	SELECT * FROM vs_datosdocentes WHERE idUsuario = arg_idUsuario LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure p_dir_vistoNotificacion
-- -----------------------------------------------------

DELIMITER $$
USE `sadeDB`$$
CREATE PROCEDURE `p_dir_vistoNotificacion`(IN arg_idNotificacion INT, IN arg_idUsuario INT)
BEGIN
	IF tipoUsuarioSegunId(arg_idUsuario) = 3 THEN
		INSERT INTO VistasNotificaciones (idUsuario, idNotificacion)
		SELECT * FROM (SELECT arg_idUsuario, arg_idNotificacion) AS tmp
		WHERE NOT EXISTS (
			SELECT * FROM VistasNotificaciones WHERE idUsuario=arg_idUsuario AND idNotificacion=arg_idNotificacion
		) LIMIT 1;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_infousuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_infousuario`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_infousuario` AS
SELECT 
	idUsuario, 
    CONCAT_WS(' ',nombres,apellido1) AS nombreCompleto, 
    fotoPerfil,
    CASE tipo 
		WHEN 1 THEN 'estudiante'
        WHEN 2 THEN 'profesor'
        WHEN 3 THEN 'directivo'
    END AS tipo
FROM Usuarios;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_publicaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_publicaciones`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_publicaciones` AS
SELECT 
	p.idPublicacion,
    p.titulo,
    p.contenido,
    p.fecha,
    viu.*,
    (SELECT COUNT(*) FROM likes l WHERE l.idPublicacion=p.idPublicacion) AS nlikes,
    (SELECT COUNT(*) FROM dislike l WHERE l.idPublicacion=p.idPublicacion) AS ndislikes,
    pv.publico,
    pv.directivos,
    pv.docentes,
    pv.estudiantes
FROM Publicaciones p
INNER JOIN vs_infousuario viu ON viu.idUsuario = p.idUsuario
INNER JOIN Privacidad pv ON pv.idPrivacidad = p.idPrivacidad
ORDER BY p.fecha DESC;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_eventos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_eventos` AS
SELECT 
	e.idEventos,
    e.hora,
    e.descripcion,
    e.idUsuario,
    viu.nombreCompleto,
    viu.tipo,
    pv.publico,
    pv.directivos,
    pv.docentes,
    pv.estudiantes
FROM Eventos e
INNER JOIN vs_infousuario viu ON viu.idUsuario = e.idUsuario
INNER JOIN Privacidad pv ON pv.idPrivacidad = e.idPrivacidad
ORDER BY e.hora ASC;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_datosUsuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_datosUsuarios`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_datosUsuarios` AS
SELECT
	u.idUsuario,
    u.nombres,
    u.apellido1,
    u.apellido2,
    u.email,
    u.tipo,
    u.fotoPerfil,
    u.sexo,
    u.fechaNacimiento,
    u.fechaRegistro,
    di.tipoDocumento,
    di.numero,
    di.fechaExpedicion,
    di.lugarExpedicion
FROM Usuarios u
LEFT JOIN DocumentoIdentidad di ON di.idUsuario = u.idUsuario
WHERE u.delete IS NULL;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_datosEstudiantes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_datosEstudiantes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_datosEstudiantes` AS
SELECT
	vdu.*,
    e.direccion,
    e.RH,
    e.egresado,
    e.idGrupo,
    g.nombre AS nombreGrupo,
    g.grado
FROM Estudiantes e
INNER JOIN vs_datosusuarios vdu ON vdu.idUsuario = e.idUsuario
LEFT JOIN Grupos g ON g.idGrupo = e.idGrupo;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_datosdocentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_datosdocentes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_datosdocentes` AS
SELECT
	vdu.*,
    d.direccion,
    d.perfilAcademico
FROM Docentes d
INNER JOIN vs_datosusuarios vdu ON vdu.idUsuario = d.idUsuario;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_datosdirectivo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_datosdirectivo`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_datosdirectivo` AS
SELECT
	vdu.*,
    d.direccion,
    d.cargo,
    emailPublico
FROM Directivos d
INNER JOIN vs_datosusuarios vdu ON vdu.idUsuario = d.idUsuario;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_infodirectivos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_infodirectivos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_infodirectivos` AS
SELECT
	d.idUsuario,
    CONCAT_WS(' ',nombres, apellido1, apellido2) AS nombre,
    email,
    fotoPerfil,
    emailPublico,
    CONCAT_WS('-',tipoDocumento,numero) AS documentoIdentidad,
    cargo,
    (SELECT telefono FROM Telefono t WHERE t.idUsuario = d.idUsuario LIMIT 1) AS telefono
FROM Directivos d
INNER JOIN vs_datosusuarios vdu ON vdu.idUsuario = d.idUsuario;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_infodocentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_infodocentes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_infodocentes` AS
SELECT
	d.idUsuario,
    CONCAT_WS(' ',nombres, apellido1, apellido2) AS nombre,
    email,
    fotoPerfil,
    CONCAT_WS('-',tipoDocumento,numero) AS documentoIdentidad,
    perfilAcademico,
   (SELECT telefono FROM Telefono t WHERE t.idUsuario = d.idUsuario LIMIT 1) AS telefono
FROM Docentes d
INNER JOIN vs_datosusuarios vdu ON vdu.idUsuario = d.idUsuario;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_infoestudiantes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_infoestudiantes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_infoestudiantes` AS
SELECT
	e.idUsuario,
    CONCAT_WS(' ',nombres, apellido1, apellido2) AS nombre,
    email,
    fotoPerfil,
    CONCAT_WS('-',tipoDocumento,numero) AS documentoIdentidad,
    egresado,
    e.idGrupo,
    g.nombre AS nombreGrupo,
    (SELECT telefono FROM Telefono t WHERE t.idUsuario = e.idUsuario LIMIT 1) AS telefono
FROM Estudiantes e
INNER JOIN vs_datosusuarios vdu ON vdu.idUsuario = e.idUsuario
LEFT JOIN Grupos g ON g.idGrupo = e.idGrupo;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_pub_publicaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_pub_publicaciones`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_pub_publicaciones` AS
SELECT
	idPublicacion,
    titulo,
    contenido,
    fecha,
    nombreCompleto,
    tipo,
    fotoPerfil,
    nlikes,
    ndislikes
FROM vs_publicaciones
WHERE publico = 1;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_pub_eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_pub_eventos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_pub_eventos` AS
SELECT
	idEventos,
    hora,
    descripcion,
    nombreCompleto,
    tipo
FROM vs_eventos
WHERE publico = 1;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_pub_directivos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_pub_directivos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_pub_directivos` AS
SELECT
	nombre,
    emailPublico,
    fotoPerfil,
    cargo
FROM vs_infodirectivos;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_est_publicaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_est_publicaciones`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_est_publicaciones` AS
SELECT
	idPublicacion,
    titulo,
    contenido,
    fecha,
    idUsuario,
    nombreCompleto,
    tipo,
    fotoPerfil,
    nlikes,
    ndislikes
FROM vs_publicaciones
WHERE estudiantes = 1;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_publicaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_publicaciones`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_publicaciones` AS
SELECT
	idPublicacion,
    titulo,
    contenido,
    fecha,
    idUsuario,
    nombreCompleto,
    tipo,
    fotoPerfil,
    nlikes,
    ndislikes
FROM vs_publicaciones
WHERE docentes = 1;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_dir_publicaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_dir_publicaciones`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_dir_publicaciones` AS
SELECT
	idPublicacion,
    titulo,
    contenido,
    fecha,
    idUsuario,
    nombreCompleto,
    tipo,
    fotoPerfil,
    nlikes,
    ndislikes
FROM vs_publicaciones
WHERE directivos = 1;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_est_eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_est_eventos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_est_eventos` AS
SELECT
	idEventos,
    hora,
    descripcion,
    idUsuario,
    nombreCompleto,
    tipo
FROM vs_eventos
WHERE estudiantes = 1;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_est_infodocentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_est_infodocentes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_est_infodocentes` AS
SELECT
	idUsuario,
    nombre,
    fotoPerfil,
    email,
    perfilAcademico
FROM vs_infodocentes;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_est_infoestudiantes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_est_infoestudiantes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_est_infoestudiantes` AS
SELECT
	idUsuario,
    nombre,
    fotoPerfil,
    email,
    egresado,
    idGrupo,
    nombreGrupo
FROM vs_infoestudiantes;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_est_infodirectivos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_est_infodirectivos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_est_infodirectivos` AS
SELECT
	idUsuario,
    nombre,
    fotoPerfil,
    emailPublico,
    cargo
FROM vs_infodirectivos;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_est_gradosdocentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_est_gradosdocentes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_est_gradosdocentes` AS
SELECT
	g.idGrupo,
    g.nombre AS nombreGrupo,
    vid.*
FROM GruposDocentes gd
INNER JOIN vs_est_infodocentes vid ON vid.idUsuario=gd.idDocente
INNER JOIN Grupos g ON g.idGrupo = gd.idGrupo;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_telefonostipousuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_telefonostipousuario`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_telefonostipousuario` AS
SELECT
	t.*,
    u.tipo
FROM Telefono t
INNER JOIN Usuarios u ON t.idUsuario = u.idUsuario;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_infodocentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_infodocentes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_infodocentes` AS
SELECT
	idUsuario,
    nombre,
    email,
    perfilAcademico
FROM vs_infodocentes;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_infodirectivo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_infodirectivo`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_infodirectivo` AS
SELECT 
	idUsuario,
    nombre,
    email,
    emailPublico,
    cargo,
    telefono
FROM vs_infodirectivos;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_infoestudiantes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_infoestudiantes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_infoestudiantes` AS
SELECT
	idUsuario,
    nombre,
    email,
    egresado,
    idGrupo,
    nombreGrupo
FROM vs_infoestudiantes;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_eventos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_eventos` AS
SELECT
	idEventos,
    hora,
    descripcion,
    idUsuario,
    nombreCompleto,
    tipo
FROM vs_eventos
WHERE docentes = 1;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_gradosdocentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_gradosdocentes`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_gradosdocentes` AS
SELECT
	g.idGrupo,
    g.nombre AS nombreGrupo,
    vid.*
FROM GruposDocentes gd
INNER JOIN vs_prf_infodocentes vid ON vid.idUsuario=gd.idDocente
INNER JOIN Grupos g ON g.idGrupo = gd.idGrupo;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_estudiantesClase`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_estudiantesClase`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_estudiantesClase` AS
SELECT
	idUsuario,
	nombres,
	apellido1,
	apellido2,
    fotoPerfil,
	email,
	RH,
    idGrupo
FROM vs_datosestudiantes;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_prf_estudiantesDirector`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_prf_estudiantesDirector`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_prf_estudiantesDirector` AS
SELECT
	de.idUsuario,
	de.nombres,
	de.apellido1,
	de.apellido2,
	de.email,
	de.RH,
    de.tipoDocumento,
    de.numero AS numeroDocumento,
    de.direccion,
    de.fechaNacimiento,
    de.sexo,
    de.idGrupo,
    MAX(t.telefono) AS telefono
FROM vs_datosestudiantes de
INNER JOIN Telefono t ON t.idUsuario = de.idUsuario
GROUP BY de.idUsuario;

-- -----------------------------------------------------
-- View `sadeDB`.`vs_dir_eventos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sadeDB`.`vs_dir_eventos`;
USE `sadeDB`;
CREATE  OR REPLACE VIEW `vs_dir_eventos` AS
SELECT
	idEventos,
    hora,
    descripcion,
    idUsuario,
    nombreCompleto,
    tipo
FROM vs_eventos
WHERE directivos = 1;
USE `sadeDB`;

DELIMITER $$
USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Usuarios_AFTER_INSERT` AFTER INSERT ON `Usuarios` FOR EACH ROW
BEGIN
	# Notificacion de bienvenido
	DECLARE var_descripcion VARCHAR(200);
    SET var_descripcion = CONCAT('Hola ',NEW.Nombres,' bienvenido a la plataforma SADE, has sido registrado como ',tipoUsuario(NEW.tipo),', aqu√≠ podras estar al d√≠a con informaci√≥n y tus datos institucionales.');
    INSERT INTO Notificaciones
	(descripcion, fecha, idUsuario) VALUES
	(var_descripcion, NOW(), NEW.idUsuario);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Usuarios_AFTER_UPDATE` AFTER UPDATE ON `Usuarios` FOR EACH ROW
BEGIN
	# Crear Notificacion cambio de datos
	DECLARE var_descripcion VARCHAR(200);
    SET var_descripcion = OLD.nombres;
    # Si se cambia la contrase√±a
    IF OLD.contrasenia <> NEW.contrasenia THEN
		SET var_descripcion = CONCAT_WS(' ',var_descripcion,'tu contrase√±a ha sido cambiada.');
        INSERT INTO Notificaciones
		(descripcion, fecha, idUsuario) VALUES
		(var_descripcion, NOW(), OLD.idUsuario);
    END IF;
    # Si se cambian datos
    IF 
		OLD.nombres <> NEW.nombres
        OR OLD.apellido1 <> NEW.apellido1
        OR OLD.apellido2 <> NEW.apellido2
        OR OLD.email <> NEW.email
        OR OLD.sexo <> NEW.sexo
        OR OLD.fechaNacimiento <> NEW.fechaNacimiento
        OR OLD.fotoPerfil <> NEW.fotoPerfil
    THEN
		SET var_descripcion = CONCAT_WS(' ',var_descripcion,'se actualizar√≥n tus datos, verifica que estos esten correctos.');
		INSERT INTO Notificaciones
		(descripcion, fecha, idUsuario) VALUES
		(var_descripcion, NOW(), OLD.idUsuario);
	END IF;
    # si se "elimina" el usuario
    IF NEW.delete IS NOT NULL THEN
		SET var_descripcion = CONCAT_WS(' ','El',tipoUsuario(OLD.tipo),CONCAT_WS(' ',OLD.nombres,OLD.apellido1,OLD.apellido2),'ha sido eliminado.');
        INSERT INTO Notificaciones
		(descripcion, fecha, directivo) VALUES
		(var_descripcion, NOW(), 1);
    END IF;
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Docentes_AFTER_UPDATE` AFTER UPDATE ON `Docentes` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombre VARCHAR(60);
    IF 
		NEW.direccion <> OLD.direccion 
        OR NEW.perfilAcademico <> OLD.perfilAcademico
	THEN
		SELECT nombres INTO var_nombre FROM Usuarios WHERE idUsuario = OLD.idUsuario;
		SET var_descripcion = CONCAT(var_nombre,', tus datos han sido actualizados, verifica que estos sean correctos.');
        INSERT INTO Notificaciones
		(descripcion, fecha, idUsuario) VALUES
		(var_descripcion, NOW(), OLD.idUsuario);
    END IF;
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Grupos_AFTER_INSERT` AFTER INSERT ON `Grupos` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    SET var_descripcion = CONCAT('Se cre√≥ el grupo ',NEW.nombre,' en la jornada ',NEW.jornada,'.');
	INSERT INTO Notificaciones
	(descripcion, fecha, directivo) VALUES
	(var_descripcion, NOW(), 1);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Grupos_AFTER_UPDATE` AFTER UPDATE ON `Grupos` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombreDirector VARCHAR(200);
    SET var_descripcion = CONCAT('El grupo ',OLD.nombre);
    IF OLD.jornada <> NEW.jornada THEN
		SET var_descripcion = CONCAT(var_descripcion,' cambi√≥ a la jornada ',NEW.jornada,'.');
		# Notificar a estudiantes del grupo
        INSERT INTO Notificaciones 
		(descripcion, fecha, idUsuario)
        SELECT
        var_descripcion, NOW(), e.idUsuario
        FROM Estudiantes e
        WHERE e.idGrupo = OLD.idGrupo;
        # Notificar a docentes del grupo
        INSERT INTO Notificaciones 
		(descripcion, fecha, idUsuario)
        SELECT
        var_descripcion, NOW(), gd.idDocente
        FROM GruposDocentes gd
        WHERE gd.idGrupo = OLD.idGrupo;
    END IF;
    IF OLD.salon <> NEW.salon AND NEW.salon IS NOT NULL THEN
		SET var_descripcion = CONCAT(var_descripcion,' cambi√≥ al sal√≥n ',NEW.salon,'.');
		# Notificar a estudiantes del grupo
        INSERT INTO Notificaciones 
		(descripcion, fecha, idUsuario)
        SELECT
        var_descripcion, NOW(), e.idUsuario
        FROM Estudiantes e
        WHERE e.idGrupo = OLD.idGrupo;
        # Notificar a docentes del grupo
        INSERT INTO Notificaciones 
		(descripcion, fecha, idUsuario)
        SELECT
        var_descripcion, NOW(), gd.idDocente
        FROM GruposDocentes gd
        WHERE gd.idGrupo = OLD.idGrupo;
    END IF;
    IF OLD.director <> NEW.director OR NEW.director IS NOT NULL THEN
		SELECT CONCAT_WS(' ',nombres,apellido1,apellido2) INTO var_nombreDirector FROM Usuarios WHERE idUsuario = NEW.director;
		SET var_descripcion = CONCAT('El profesor ',var_nombreDirector,' ahora es director del grado ',OLD.nombre,'.');
		# Notificar a estudiantes del grupo
        INSERT INTO Notificaciones 
		(descripcion, fecha, idUsuario)
        SELECT
        var_descripcion, NOW(), e.idUsuario
        FROM Estudiantes e
        WHERE e.idGrupo = OLD.idGrupo;
        # Notificar a docentes del grupo
        INSERT INTO Notificaciones 
		(descripcion, fecha, idUsuario)
        SELECT
        var_descripcion, NOW(), gd.idDocente
        FROM GruposDocentes gd
        WHERE gd.idGrupo = OLD.idGrupo;
    END IF;
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Grupos_AFTER_DELETE` AFTER DELETE ON `Grupos` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    SET var_descripcion = CONCAT('Se elimin√≥ el grupo ',OLD.nombre,'.');
	INSERT INTO Notificaciones
	(descripcion, fecha, directivo) VALUES
	(var_descripcion, NOW(), 1);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Estudiantes_BEFORE_UPDATE` BEFORE UPDATE ON `Estudiantes` FOR EACH ROW
BEGIN
	# Si es egresado
    IF NEW.egresado = 1 THEN
        SET NEW.idGrupo = NULL;
    END IF;
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Estudiantes_AFTER_UPDATE` AFTER UPDATE ON `Estudiantes` FOR EACH ROW
BEGIN
	# Crear Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombreGrupo VARCHAR(10);
    DECLARE var_gradoAnterior TINYINT(2);
    DECLARE var_gradoNuevo TINYINT(2);
    SELECT nombres INTO var_descripcion FROM Usuarios WHERE idUsuario=OLD.idUsuario;
    # Si se cambia el grupo
    IF OLD.idGrupo <> NEW.idGrupo THEN
		SELECT grado INTO var_gradoAnterior FROM Grupos WHERE idGrupo = OLD.idGrupo;
        SELECT grado,nombre INTO var_gradoNuevo,var_nombreGrupo FROM Grupos WHERE idGrupo = NEW.idGrupo;
		IF var_gradoNuevo > var_gradoAnterior THEN
			SET var_descripcion = CONCAT(var_descripcion,' has sido promovido al grado ',var_gradoNuevo,'¬∞, felicidades, ahora eres parte del grupo ',var_nombreGrupo,'.');
        ELSE
			SET var_descripcion = CONCAT(var_descripcion,' ahora eres parte del grupo ',var_nombreGrupo,'.');
        END IF;
        INSERT INTO Notificaciones
		(descripcion, fecha, idUsuario) VALUES
		(var_descripcion, NOW(), OLD.idUsuario);
    END IF;
    # Si es egresado
    IF NEW.egresado = 1 THEN
        SET var_descripcion = CONCAT(var_descripcion,' ahora eres egresado, esperamos seguir viendote por aqu√≠.');
        INSERT INTO Notificaciones
		(descripcion, fecha, idUsuario) VALUES
		(var_descripcion, NOW(), OLD.idUsuario);
    END IF;
    # Cambio de datos
    IF 
		OLD.direccion <> NEW.direccion
        OR OLD.RH <> NEW.RH
    THEN
		SET var_descripcion = CONCAT_WS(' ',var_descripcion,'se actualizar√≥n tus datos, verifica que estos esten correctos.');
		INSERT INTO Notificaciones
		(descripcion, fecha, idUsuario) VALUES
		(var_descripcion, NOW(), OLD.idUsuario);
	END IF;
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Directivos_AFTER_UPDATE` AFTER UPDATE ON `Directivos` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombre VARCHAR(200);
    # Notificar cambio de cargo
    IF NEW.cargo <> OLD.cargo THEN
		SELECT CONCAT_WS(' ',nombres,apellido1,apellido2) INTO var_nombre FROM Usuarios WHERE idUsuario = OLD.idUsuario;
		SET var_descripcion = CONCAT('Te informamos que ',var_nombre,' ahora ejerce el cargo de ',NEW.cargo,'.');
        INSERT INTO Notificaciones
		(descripcion, fecha, directivo, docente, estudiante) VALUES
		(var_descripcion, NOW(), 1,1,1);
    END IF;
    # Notificar cambio de datos
    IF 
		NEW.direccion <> OLD.direccion 
        OR NEW.emailPublico <> OLD.emailPublico
	THEN
		SELECT nombres INTO var_nombre FROM Usuarios WHERE idUsuario = OLD.idUsuario;
		SET var_descripcion = CONCAT(var_nombre,', tus datos han sido actualizados, verifica que estos esten correctos.');
        INSERT INTO Notificaciones
		(descripcion, fecha, idUsuario) VALUES
		(var_descripcion, NOW(), OLD.idUsuario);
    END IF;
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`DocumentoIdentidad_AFTER_UPDATE` AFTER UPDATE ON `DocumentoIdentidad` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombre VARCHAR(60);
    SELECT nombres INTO var_nombre FROM Usuarios WHERE idUsuario = OLD.idUsuario;
	SET var_descripcion = CONCAT(var_nombre,', los datos de tu documento de identidad han sido cambiados.');
	INSERT INTO Notificaciones
	(descripcion, fecha, idUsuario) VALUES
	(var_descripcion, NOW(), OLD.idUsuario);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Telefono_AFTER_UPDATE` AFTER UPDATE ON `Telefono` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombre VARCHAR(60);
    SELECT nombres INTO var_nombre FROM Usuarios WHERE idUsuario = OLD.idUsuario;
	SET var_descripcion = CONCAT(var_nombre,', se cambi√≥ el n√∫mero de tel√©fono ',OLD.telefono,' a ',NEW.telefono,'.');
	INSERT INTO Notificaciones
	(descripcion, fecha, idUsuario) VALUES
	(var_descripcion, NOW(), OLD.idUsuario);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`GruposDocentes_AFTER_INSERT` AFTER INSERT ON `GruposDocentes` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombreDocente VARCHAR(200);
    DECLARE var_nombreGrupo VARCHAR(10);
    SELECT CONCAT_WS(' ',nombres, apellido1, apellido2) INTO var_nombreDocente FROM Usuarios WHERE idUsuario = NEW.idDocente;
    SELECT nombre INTO var_nombreGrupo FROM Grupos WHERE idGrupo = NEW.idGrupo;
    SET var_descripcion = CONCAT(var_nombreDocente,' se agreg√≥ como profesor(a) al grupo ',var_nombreGrupo,'.');
    # Notificar a estudiantes del grupo
	INSERT INTO Notificaciones 
	(descripcion, fecha, idUsuario)
	SELECT
	var_descripcion, NOW(), e.idUsuario
	FROM Estudiantes e
	WHERE e.idGrupo = NEW.idGrupo;
    # Notificar al profesor
    SET var_descripcion = CONCAT('Has sido agregado como profesor(a) en el grupo ',var_nombreGrupo,'.');
    INSERT INTO Notificaciones
	(descripcion, fecha, idUsuario) VALUES
	(var_descripcion, NOW(), NEW.idDocente);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`GruposDocentes_AFTER_DELETE` AFTER DELETE ON `GruposDocentes` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(200);
    DECLARE var_nombreDocente VARCHAR(200);
    DECLARE var_nombreGrupo VARCHAR(10);
    SELECT CONCAT_WS(' ',nombres, apellido1, apellido2) INTO var_nombreDocente FROM Usuarios WHERE idUsuario = OLD.idDocente;
    SELECT nombre INTO var_nombreGrupo FROM Grupos WHERE idGrupo = OLD.idGrupo;
    SET var_descripcion = CONCAT(var_nombreDocente,' ya no es profesor(a) del grupo ',var_nombreGrupo,'.');
    # Notificar a estudiantes del grupo
	INSERT INTO Notificaciones 
	(descripcion, fecha, idUsuario)
	SELECT
	var_descripcion, NOW(), e.idUsuario
	FROM Estudiantes e
	WHERE e.idGrupo = OLD.idGrupo;
    # Notificar al profesor
    SET var_descripcion = CONCAT('Ya no eres profesor(a) del grupo ',var_nombreGrupo,'.');
    INSERT INTO Notificaciones
	(descripcion, fecha, idUsuario) VALUES
	(var_descripcion, NOW(), OLD.idDocente);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Publicaciones_AFTER_INSERT` AFTER INSERT ON `Publicaciones` FOR EACH ROW
BEGIN
	# Notificar a quien public√≥
    DECLARE var_descripcion VARCHAR(200);
    SET var_descripcion = CONCAT('Has publicado ',UPPER(NEW.titulo),' el d√≠a ',DAY(NEW.FECHA),' de ',mesesEspanol(MONTH(NEW.fecha)),' a las ',DATE_FORMAT(NEW.fecha,'%h:%i %p'));
    INSERT INTO Notificaciones
	(descripcion, fecha, idUsuario) VALUES
	(var_descripcion, NOW(), NEW.idUsuario);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Publicaciones_AFTER_DELETE` AFTER DELETE ON `Publicaciones` FOR EACH ROW
BEGIN
	# Notificar a quien public√≥
    DECLARE var_descripcion VARCHAR(200);
    SET var_descripcion = CONCAT('Se elimin√≥ tu publicaci√≥n ',UPPER(OLD.titulo));
    INSERT INTO Notificaciones
	(descripcion, fecha, idUsuario) VALUES
	(var_descripcion, NOW(), OLD.idUsuario);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Eventos_AFTER_INSERT` AFTER INSERT ON `Eventos` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(500);
    DECLARE var_nombrePublicador VARCHAR(200);
    DECLARE var_tipo VARCHAR(200);
    DECLARE var_directivos TINYINT;
    DECLARE var_docentes TINYINT;
    DECLARE var_estudiantes TINYINT;
    SELECT CONCAT_WS(' ',nombres,apellido1),tipo INTO var_nombrePublicador, var_tipo FROM Usuarios WHERE idUsuario = NEW.idUsuario;
    SET var_descripcion = CONCAT_WS(' ','El',tipoUsuario(var_tipo),var_nombrePublicador,'ha publicado un nuevo evento para el d√≠a',DAY(NEW.hora),'de',mesesEspanol(MONTH(NEW.hora)),'del',YEAR(NEW.hora),'a las',CONCAT(DATE_FORMAT(NEW.hora,'%h:%i %p'),':'),NEW.descripcion);
    SELECT directivos,docentes,estudiantes INTO var_directivos,var_docentes,var_estudiantes FROM Privacidad WHERE idPrivacidad = NEW.idPrivacidad;
    INSERT INTO Notificaciones
	(descripcion, fecha, directivo, docente, estudiante) VALUES
	(var_descripcion, NOW(),var_directivos,var_docentes,var_estudiantes);
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`Eventos_AFTER_DELETE` AFTER DELETE ON `Eventos` FOR EACH ROW
BEGIN
	# Generar Notificaciones
    DECLARE var_descripcion VARCHAR(500);
    DECLARE var_nombrePublicador VARCHAR(200);
    DECLARE var_tipo VARCHAR(200);
    DECLARE var_directivos TINYINT;
    DECLARE var_docentes TINYINT;
    DECLARE var_estudiantes TINYINT;
    # Notificar solo eventos que son mayores a la fecha actual
    IF OLD.hora > NOW() THEN
		SELECT CONCAT_WS(' ',nombres,apellido1),tipo INTO var_nombrePublicador, var_tipo FROM Usuarios WHERE idUsuario = OLD.idUsuario;
		SET var_descripcion = CONCAT_WS(' ','El',tipoUsuario(var_tipo),var_nombrePublicador,'ha cancelado el evento del d√≠a',DAY(OLD.hora),'de',mesesEspanol(MONTH(OLD.hora)),'del',YEAR(OLD.hora),'a las',CONCAT(DATE_FORMAT(OLD.hora,'%h:%i %p'),':'),OLD.descripcion);
		SELECT directivos,docentes,estudiantes INTO var_directivos,var_docentes,var_estudiantes FROM Privacidad WHERE idPrivacidad = OLD.idPrivacidad;
		INSERT INTO Notificaciones
		(descripcion, fecha, directivo, docente, estudiante) VALUES
		(var_descripcion, NOW(),var_directivos,var_docentes,var_estudiantes);
	END IF;
END$$

USE `sadeDB`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sadeDB`.`VistasNotificaciones_AFTER_INSERT` AFTER INSERT ON `VistasNotificaciones` FOR EACH ROW
BEGIN
	IF 
    EXISTS(SELECT * FROM Notificaciones WHERE directivo=0 AND docente=0 AND estudiante=0 AND idUsuario=NEW.idUsuario AND idNotificacion=NEW.idNotificacion)
    THEN
		DELETE FROM Notificaciones WHERE idNotificacion=NEW.idNotificacion;
    END IF;
END$$


DELIMITER ;
CREATE USER 'sade-publico' IDENTIFIED BY '1234';

GRANT EXECUTE ON procedure `sadeDB`.`p_pub_numUsuarios` TO 'sade-publico';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_pub_publicaciones` TO 'sade-publico';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_pub_eventos` TO 'sade-publico';
GRANT EXECUTE ON procedure `sadeDB`.`p_pub_eventosMes` TO 'sade-publico';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_pub_directivos` TO 'sade-publico';
GRANT SELECT, UPDATE ON TABLE `sadeDB`.`Usuarios` TO 'sade-publico';
GRANT EXECUTE ON procedure `sadeDB`.`p_pub_login` TO 'sade-publico';
GRANT EXECUTE ON procedure `sadeDB`.`p_pub_buscarDirectivo` TO 'sade-publico';
GRANT EXECUTE ON procedure `sadeDB`.`p_pub_buscarPublicacion` TO 'sade-publico';
GRANT UPDATE, SELECT, INSERT, DELETE, INDEX ON TABLE `sadeDB`.`personal_access_tokens` TO 'sade-publico';
CREATE USER 'sade-directivo' IDENTIFIED BY '1234';

GRANT INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Usuarios` TO 'sade-directivo';
GRANT INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Estudiantes` TO 'sade-directivo';
GRANT INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Docentes` TO 'sade-directivo';
GRANT UPDATE, SELECT, INSERT ON TABLE `sadeDB`.`Directivos` TO 'sade-directivo';
GRANT INSERT, SELECT, UPDATE, DELETE ON TABLE `sadeDB`.`DocumentoIdentidad` TO 'sade-directivo';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Telefono` TO 'sade-directivo';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Grupos` TO 'sade-directivo';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`GruposDocentes` TO 'sade-directivo';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Publicaciones` TO 'sade-directivo';
GRANT INSERT, DELETE, UPDATE, SELECT ON TABLE `sadeDB`.`Dislike` TO 'sade-directivo';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Likes` TO 'sade-directivo';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Eventos` TO 'sade-directivo';
GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE `sadeDB`.`Notificaciones` TO 'sade-directivo';
GRANT UPDATE, SELECT, DELETE, INSERT ON TABLE `sadeDB`.`VistasNotificaciones` TO 'sade-directivo';
GRANT UPDATE, SELECT, INSERT, DELETE ON TABLE `sadeDB`.`Privacidad` TO 'sade-directivo';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_datosdirectivo` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_dir_publicaciones` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_notificacionesUsuario` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_numNotificaciones` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_datosdocentes` TO 'sade-directivo';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_datosEstudiantes` TO 'sade-directivo';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_datosUsuarios` TO 'sade-directivo';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_publicaciones` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_telefonostipousuario` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_infousuario` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_infoestudiantes` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_infodocentes` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_infodirectivos` TO 'sade-directivo';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_eventos` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_eventosMes` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_buscarDirectivo` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_buscarDocente` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_buscarEstudiante` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_buscarEvento` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_buscarGrupo` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_buscarPublicacion` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_changeFotoPerfil` TO 'sade-directivo';
GRANT EXECUTE ON procedure `sadeDB`.`p_dir_vistoNotificacion` TO 'sade-directivo';
CREATE USER 'sade-profesor' IDENTIFIED BY '1234';

GRANT SELECT ON TABLE `sadeDB`.`Grupos` TO 'sade-profesor';
GRANT UPDATE, SELECT, DELETE, INSERT ON TABLE `sadeDB`.`Dislike` TO 'sade-profesor';
GRANT UPDATE, SELECT, INSERT, DELETE ON TABLE `sadeDB`.`Likes` TO 'sade-profesor';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_prf_publicaciones` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_notificacionesUsuario` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_numNotificaciones` TO 'sade-profesor';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_prf_gradosdocentes` TO 'sade-profesor';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_prf_infodirectivo` TO 'sade-profesor';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_prf_infodocentes` TO 'sade-profesor';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_prf_infoestudiantes` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_addTelefono` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_deletePublicacion` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_deleteTelefono` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_editPublicacion` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_editTelefono` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_eventosMes` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_updateDatos` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_verTelefonos` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_misGruposClases` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_misGruposDireccion` TO 'sade-profesor';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_prf_estudiantesDirector` TO 'sade-profesor';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_publicaciones` TO 'sade-profesor';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_infousuario` TO 'sade-profesor';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_eventos` TO 'sade-profesor';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_prf_estudiantesClase` TO 'sade-profesor';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_prf_eventos` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_buscarDocente` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_buscarEstudiante` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_buscarEvento` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_buscarGrupo` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_buscarPublicacion` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_addPublicacion` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_buscarDirectivo` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_vistoNotificacion` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_changeFotoPerfil` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_addEvento` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_deleteEvento` TO 'sade-profesor';
GRANT EXECUTE ON procedure `sadeDB`.`p_prf_verDatosDocente` TO 'sade-profesor';
CREATE USER 'sade-estudiante' IDENTIFIED BY '1234';

GRANT SELECT ON TABLE `sadeDB`.`Grupos` TO 'sade-estudiante';
GRANT UPDATE, SELECT, INSERT, DELETE ON TABLE `sadeDB`.`Dislike` TO 'sade-estudiante';
GRANT UPDATE, SELECT, INSERT, DELETE ON TABLE `sadeDB`.`Likes` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_est_publicaciones` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_est_eventos` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_eventosMes` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_est_infodocentes` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_est_infoestudiantes` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_est_infodirectivos` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_notificacionesUsuario` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_numNotificaciones` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_est_gradosdocentes` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_updateDatos` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_verDatosEstudiante` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_verTelefonos` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_deleteTelefono` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_addTelefono` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_vistoNotificacion` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_addPublicacion` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_deletePublicacion` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_editPublicacion` TO 'sade-estudiante';
GRANT SELECT, SHOW VIEW ON TABLE `sadeDB`.`vs_publicaciones` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_infousuario` TO 'sade-estudiante';
GRANT SHOW VIEW, SELECT ON TABLE `sadeDB`.`vs_eventos` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_buscarEstudiante` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_buscarDocente` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_buscarGrupo` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_buscarEvento` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_buscarPublicacion` TO 'sade-estudiante';
GRANT EXECUTE ON procedure `sadeDB`.`p_est_changeFotoPerfil` TO 'sade-estudiante';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
